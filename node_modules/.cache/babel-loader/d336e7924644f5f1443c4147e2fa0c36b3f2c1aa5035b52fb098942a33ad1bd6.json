{"ast":null,"code":"const axios = require('axios');\n\n// Define the options for making requests to the ExerciseDB API\nconst exerciseOptions = {\n  method: 'GET',\n  url: 'https://exercisedb.p.rapidapi.com/exercises',\n  params: {\n    limit: '10'\n  },\n  headers: {\n    'X-RapidAPI-Key': '3318bbd695mshf62f9a72f5075c4p18abafjsnc0d74b7130c9',\n    'X-RapidAPI-Host': 'exercisedb.p.rapidapi.com'\n  }\n};\n\n// Define the options for making requests to the YouTube Search and Download API\nconst youtubeOptions = {\n  method: 'GET',\n  url: 'YOUR_YOUTUBE_API_ENDPOINT',\n  headers: {\n    'X-RapidAPI-Host': 'youtube-search-and-download.p.rapidapi.com',\n    'X-RapidAPI-Key': 'YOUR_RAPIDAPI_KEY'\n  }\n};\n\n// Function to fetch data using Axios and the provided options\nconst fetchData = async options => {\n  try {\n    const response = await axios.request(options);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error; // Rethrow the error to handle it in the calling code\n  }\n};\n\n// Example usage:\n(async () => {\n  try {\n    const exerciseData = await fetchData(exerciseOptions);\n    console.log('Exercise Data:', exerciseData);\n\n    // If you want to fetch data from the YouTube API as well, uncomment the following line:\n    // const youtubeData = await fetchData(youtubeOptions);\n    // console.log('YouTube Data:', youtubeData);\n  } catch (error) {\n    console.error('An error occurred:', error);\n  }\n})();","map":{"version":3,"names":["axios","require","exerciseOptions","method","url","params","limit","headers","youtubeOptions","fetchData","options","response","request","data","error","console","exerciseData","log"],"sources":["/home/lopezjr/fitnessbud1/src/utils/fetchData.js"],"sourcesContent":["const axios = require('axios');\n\n// Define the options for making requests to the ExerciseDB API\nconst exerciseOptions = {\n  method: 'GET',\n  url: 'https://exercisedb.p.rapidapi.com/exercises',\n  params: { limit: '10' },\n  headers: {\n    'X-RapidAPI-Key': '3318bbd695mshf62f9a72f5075c4p18abafjsnc0d74b7130c9',\n    'X-RapidAPI-Host': 'exercisedb.p.rapidapi.com'\n  }\n};\n\n// Define the options for making requests to the YouTube Search and Download API\nconst youtubeOptions = {\n  method: 'GET',\n  url: 'YOUR_YOUTUBE_API_ENDPOINT',\n  headers: {\n    'X-RapidAPI-Host': 'youtube-search-and-download.p.rapidapi.com',\n    'X-RapidAPI-Key': 'YOUR_RAPIDAPI_KEY',\n  },\n};\n\n// Function to fetch data using Axios and the provided options\nconst fetchData = async (options) => {\n  try {\n    const response = await axios.request(options);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error; // Rethrow the error to handle it in the calling code\n  }\n};\n\n// Example usage:\n(async () => {\n  try {\n    const exerciseData = await fetchData(exerciseOptions);\n    console.log('Exercise Data:', exerciseData);\n\n    // If you want to fetch data from the YouTube API as well, uncomment the following line:\n    // const youtubeData = await fetchData(youtubeOptions);\n    // console.log('YouTube Data:', youtubeData);\n  } catch (error) {\n    console.error('An error occurred:', error);\n  }\n})();\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;;AAE9B;AACA,MAAMC,eAAe,GAAG;EACtBC,MAAM,EAAE,KAAK;EACbC,GAAG,EAAE,6CAA6C;EAClDC,MAAM,EAAE;IAAEC,KAAK,EAAE;EAAK,CAAC;EACvBC,OAAO,EAAE;IACP,gBAAgB,EAAE,oDAAoD;IACtE,iBAAiB,EAAE;EACrB;AACF,CAAC;;AAED;AACA,MAAMC,cAAc,GAAG;EACrBL,MAAM,EAAE,KAAK;EACbC,GAAG,EAAE,2BAA2B;EAChCG,OAAO,EAAE;IACP,iBAAiB,EAAE,4CAA4C;IAC/D,gBAAgB,EAAE;EACpB;AACF,CAAC;;AAED;AACA,MAAME,SAAS,GAAG,MAAOC,OAAO,IAAK;EACnC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,OAAO,CAACF,OAAO,CAAC;IAC7C,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpB,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,CAAC,YAAY;EACX,IAAI;IACF,MAAME,YAAY,GAAG,MAAMP,SAAS,CAACP,eAAe,CAAC;IACrDa,OAAO,CAACE,GAAG,CAAC,gBAAgB,EAAED,YAAY,CAAC;;IAE3C;IACA;IACA;EACF,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;EAC5C;AACF,CAAC,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}